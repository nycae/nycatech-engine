// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: scene.proto
// Protobuf C++ Version: 5.29.3

#ifndef scene_2eproto_2epb_2eh
#define scene_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_scene_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_scene_2eproto;
namespace nycatech {
namespace protos {
namespace v1 {
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class Component;
struct ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class Entity;
struct EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class Mesh;
struct MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
class Scene;
struct SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class System;
struct SystemDefaultTypeInternal;
extern SystemDefaultTypeInternal _System_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector4;
struct Vector4DefaultTypeInternal;
extern Vector4DefaultTypeInternal _Vector4_default_instance_;
}  // namespace v1
}  // namespace protos
}  // namespace nycatech
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace nycatech {
namespace protos {
namespace v1 {
enum System_Type : int {
  System_Type_Renderer = 0,
  System_Type_System_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  System_Type_System_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool System_Type_IsValid(int value);
extern const uint32_t System_Type_internal_data_[];
constexpr System_Type System_Type_Type_MIN = static_cast<System_Type>(0);
constexpr System_Type System_Type_Type_MAX = static_cast<System_Type>(0);
constexpr int System_Type_Type_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
System_Type_descriptor();
template <typename T>
const std::string& System_Type_Name(T value) {
  static_assert(std::is_same<T, System_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return System_Type_Name(static_cast<System_Type>(value));
}
template <>
inline const std::string& System_Type_Name(System_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<System_Type_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool System_Type_Parse(absl::string_view name, System_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<System_Type>(
      System_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Vector4 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nycatech.protos.v1.Vector4) */ {
 public:
  inline Vector4() : Vector4(nullptr) {}
  ~Vector4() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vector4* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vector4));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vector4(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vector4(const Vector4& from) : Vector4(nullptr, from) {}
  inline Vector4(Vector4&& from) noexcept
      : Vector4(nullptr, std::move(from)) {}
  inline Vector4& operator=(const Vector4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector4& operator=(Vector4&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector4* internal_default_instance() {
    return reinterpret_cast<const Vector4*>(
        &_Vector4_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Vector4& a, Vector4& b) { a.Swap(&b); }
  inline void Swap(Vector4* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector4* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector4* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vector4>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector4& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vector4& from) { Vector4::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vector4* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nycatech.protos.v1.Vector4"; }

 protected:
  explicit Vector4(::google::protobuf::Arena* arena);
  Vector4(::google::protobuf::Arena* arena, const Vector4& from);
  Vector4(::google::protobuf::Arena* arena, Vector4&& from) noexcept
      : Vector4(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // float w = 4;
  void clear_w() ;
  float w() const;
  void set_w(float value);

  private:
  float _internal_w() const;
  void _internal_set_w(float value);

  public:
  // @@protoc_insertion_point(class_scope:nycatech.protos.v1.Vector4)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vector4& from_msg);
    float x_;
    float y_;
    float z_;
    float w_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Vector3 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nycatech.protos.v1.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vector3* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vector3));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vector3(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vector3(const Vector3& from) : Vector3(nullptr, from) {}
  inline Vector3(Vector3&& from) noexcept
      : Vector3(nullptr, std::move(from)) {}
  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
        &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Vector3& a, Vector3& b) { a.Swap(&b); }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vector3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vector3& from) { Vector3::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vector3* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nycatech.protos.v1.Vector3"; }

 protected:
  explicit Vector3(::google::protobuf::Arena* arena);
  Vector3(::google::protobuf::Arena* arena, const Vector3& from);
  Vector3(::google::protobuf::Arena* arena, Vector3&& from) noexcept
      : Vector3(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:nycatech.protos.v1.Vector3)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vector3& from_msg);
    float x_;
    float y_;
    float z_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class System final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nycatech.protos.v1.System) */ {
 public:
  inline System() : System(nullptr) {}
  ~System() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(System* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(System));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR System(
      ::google::protobuf::internal::ConstantInitialized);

  inline System(const System& from) : System(nullptr, from) {}
  inline System(System&& from) noexcept
      : System(nullptr, std::move(from)) {}
  inline System& operator=(const System& from) {
    CopyFrom(from);
    return *this;
  }
  inline System& operator=(System&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const System& default_instance() {
    return *internal_default_instance();
  }
  static inline const System* internal_default_instance() {
    return reinterpret_cast<const System*>(
        &_System_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(System& a, System& b) { a.Swap(&b); }
  inline void Swap(System* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(System* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  System* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<System>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const System& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const System& from) { System::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(System* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nycatech.protos.v1.System"; }

 protected:
  explicit System(::google::protobuf::Arena* arena);
  System(::google::protobuf::Arena* arena, const System& from);
  System(::google::protobuf::Arena* arena, System&& from) noexcept
      : System(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = System_Type;
  static constexpr Type Renderer = System_Type_Renderer;
  static inline bool Type_IsValid(int value) {
    return System_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = System_Type_Type_MIN;
  static constexpr Type Type_MAX = System_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = System_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return System_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return System_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return System_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFieldNumber = 1,
  };
  // .nycatech.protos.v1.System.Type type = 1;
  void clear_type() ;
  ::nycatech::protos::v1::System_Type type() const;
  void set_type(::nycatech::protos::v1::System_Type value);

  private:
  ::nycatech::protos::v1::System_Type _internal_type() const;
  void _internal_set_type(::nycatech::protos::v1::System_Type value);

  public:
  // @@protoc_insertion_point(class_scope:nycatech.protos.v1.System)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const System& from_msg);
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Mesh final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nycatech.protos.v1.Mesh) */ {
 public:
  inline Mesh() : Mesh(nullptr) {}
  ~Mesh() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Mesh* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Mesh));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Mesh(
      ::google::protobuf::internal::ConstantInitialized);

  inline Mesh(const Mesh& from) : Mesh(nullptr, from) {}
  inline Mesh(Mesh&& from) noexcept
      : Mesh(nullptr, std::move(from)) {}
  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh& operator=(Mesh&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mesh* internal_default_instance() {
    return reinterpret_cast<const Mesh*>(
        &_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Mesh& a, Mesh& b) { a.Swap(&b); }
  inline void Swap(Mesh* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mesh* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mesh* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Mesh>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Mesh& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Mesh& from) { Mesh::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Mesh* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nycatech.protos.v1.Mesh"; }

 protected:
  explicit Mesh(::google::protobuf::Arena* arena);
  Mesh(::google::protobuf::Arena* arena, const Mesh& from);
  Mesh(::google::protobuf::Arena* arena, Mesh&& from) noexcept
      : Mesh(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:nycatech.protos.v1.Mesh)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Mesh& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Transform final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nycatech.protos.v1.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Transform* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Transform));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Transform(
      ::google::protobuf::internal::ConstantInitialized);

  inline Transform(const Transform& from) : Transform(nullptr, from) {}
  inline Transform(Transform&& from) noexcept
      : Transform(nullptr, std::move(from)) {}
  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
        &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Transform& a, Transform& b) { a.Swap(&b); }
  inline void Swap(Transform* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Transform>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Transform& from) { Transform::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Transform* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nycatech.protos.v1.Transform"; }

 protected:
  explicit Transform(::google::protobuf::Arena* arena);
  Transform(::google::protobuf::Arena* arena, const Transform& from);
  Transform(::google::protobuf::Arena* arena, Transform&& from) noexcept
      : Transform(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
    kScaleFieldNumber = 3,
  };
  // .nycatech.protos.v1.Vector3 position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::nycatech::protos::v1::Vector3& position() const;
  PROTOBUF_NODISCARD ::nycatech::protos::v1::Vector3* release_position();
  ::nycatech::protos::v1::Vector3* mutable_position();
  void set_allocated_position(::nycatech::protos::v1::Vector3* value);
  void unsafe_arena_set_allocated_position(::nycatech::protos::v1::Vector3* value);
  ::nycatech::protos::v1::Vector3* unsafe_arena_release_position();

  private:
  const ::nycatech::protos::v1::Vector3& _internal_position() const;
  ::nycatech::protos::v1::Vector3* _internal_mutable_position();

  public:
  // .nycatech.protos.v1.Vector3 rotation = 2;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::nycatech::protos::v1::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::nycatech::protos::v1::Vector3* release_rotation();
  ::nycatech::protos::v1::Vector3* mutable_rotation();
  void set_allocated_rotation(::nycatech::protos::v1::Vector3* value);
  void unsafe_arena_set_allocated_rotation(::nycatech::protos::v1::Vector3* value);
  ::nycatech::protos::v1::Vector3* unsafe_arena_release_rotation();

  private:
  const ::nycatech::protos::v1::Vector3& _internal_rotation() const;
  ::nycatech::protos::v1::Vector3* _internal_mutable_rotation();

  public:
  // .nycatech.protos.v1.Vector3 scale = 3;
  bool has_scale() const;
  void clear_scale() ;
  const ::nycatech::protos::v1::Vector3& scale() const;
  PROTOBUF_NODISCARD ::nycatech::protos::v1::Vector3* release_scale();
  ::nycatech::protos::v1::Vector3* mutable_scale();
  void set_allocated_scale(::nycatech::protos::v1::Vector3* value);
  void unsafe_arena_set_allocated_scale(::nycatech::protos::v1::Vector3* value);
  ::nycatech::protos::v1::Vector3* unsafe_arena_release_scale();

  private:
  const ::nycatech::protos::v1::Vector3& _internal_scale() const;
  ::nycatech::protos::v1::Vector3* _internal_mutable_scale();

  public:
  // @@protoc_insertion_point(class_scope:nycatech.protos.v1.Transform)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Transform& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::nycatech::protos::v1::Vector3* position_;
    ::nycatech::protos::v1::Vector3* rotation_;
    ::nycatech::protos::v1::Vector3* scale_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Camera final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nycatech.protos.v1.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  ~Camera() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Camera* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Camera));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Camera(
      ::google::protobuf::internal::ConstantInitialized);

  inline Camera(const Camera& from) : Camera(nullptr, from) {}
  inline Camera(Camera&& from) noexcept
      : Camera(nullptr, std::move(from)) {}
  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
        &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Camera& a, Camera& b) { a.Swap(&b); }
  inline void Swap(Camera* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Camera* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Camera>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Camera& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Camera& from) { Camera::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Camera* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nycatech.protos.v1.Camera"; }

 protected:
  explicit Camera(::google::protobuf::Arena* arena);
  Camera(::google::protobuf::Arena* arena, const Camera& from);
  Camera(::google::protobuf::Arena* arena, Camera&& from) noexcept
      : Camera(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kViewMatrixFieldNumber = 4,
  };
  // .nycatech.protos.v1.Vector4 view_matrix = 4;
  bool has_view_matrix() const;
  void clear_view_matrix() ;
  const ::nycatech::protos::v1::Vector4& view_matrix() const;
  PROTOBUF_NODISCARD ::nycatech::protos::v1::Vector4* release_view_matrix();
  ::nycatech::protos::v1::Vector4* mutable_view_matrix();
  void set_allocated_view_matrix(::nycatech::protos::v1::Vector4* value);
  void unsafe_arena_set_allocated_view_matrix(::nycatech::protos::v1::Vector4* value);
  ::nycatech::protos::v1::Vector4* unsafe_arena_release_view_matrix();

  private:
  const ::nycatech::protos::v1::Vector4& _internal_view_matrix() const;
  ::nycatech::protos::v1::Vector4* _internal_mutable_view_matrix();

  public:
  // @@protoc_insertion_point(class_scope:nycatech.protos.v1.Camera)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Camera& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::nycatech::protos::v1::Vector4* view_matrix_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Component final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nycatech.protos.v1.Component) */ {
 public:
  inline Component() : Component(nullptr) {}
  ~Component() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Component* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Component));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Component(
      ::google::protobuf::internal::ConstantInitialized);

  inline Component(const Component& from) : Component(nullptr, from) {}
  inline Component(Component&& from) noexcept
      : Component(nullptr, std::move(from)) {}
  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Component& default_instance() {
    return *internal_default_instance();
  }
  enum ComponentCase {
    kTransform = 1,
    kMesh = 2,
    COMPONENT_NOT_SET = 0,
  };
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
        &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Component& a, Component& b) { a.Swap(&b); }
  inline void Swap(Component* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Component* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Component>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Component& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Component& from) { Component::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Component* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nycatech.protos.v1.Component"; }

 protected:
  explicit Component(::google::protobuf::Arena* arena);
  Component(::google::protobuf::Arena* arena, const Component& from);
  Component(::google::protobuf::Arena* arena, Component&& from) noexcept
      : Component(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTransformFieldNumber = 1,
    kMeshFieldNumber = 2,
  };
  // .nycatech.protos.v1.Transform transform = 1;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;

  public:
  void clear_transform() ;
  const ::nycatech::protos::v1::Transform& transform() const;
  PROTOBUF_NODISCARD ::nycatech::protos::v1::Transform* release_transform();
  ::nycatech::protos::v1::Transform* mutable_transform();
  void set_allocated_transform(::nycatech::protos::v1::Transform* value);
  void unsafe_arena_set_allocated_transform(::nycatech::protos::v1::Transform* value);
  ::nycatech::protos::v1::Transform* unsafe_arena_release_transform();

  private:
  const ::nycatech::protos::v1::Transform& _internal_transform() const;
  ::nycatech::protos::v1::Transform* _internal_mutable_transform();

  public:
  // .nycatech.protos.v1.Mesh mesh = 2;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;

  public:
  void clear_mesh() ;
  const ::nycatech::protos::v1::Mesh& mesh() const;
  PROTOBUF_NODISCARD ::nycatech::protos::v1::Mesh* release_mesh();
  ::nycatech::protos::v1::Mesh* mutable_mesh();
  void set_allocated_mesh(::nycatech::protos::v1::Mesh* value);
  void unsafe_arena_set_allocated_mesh(::nycatech::protos::v1::Mesh* value);
  ::nycatech::protos::v1::Mesh* unsafe_arena_release_mesh();

  private:
  const ::nycatech::protos::v1::Mesh& _internal_mesh() const;
  ::nycatech::protos::v1::Mesh* _internal_mutable_mesh();

  public:
  void clear_component();
  ComponentCase component_case() const;
  // @@protoc_insertion_point(class_scope:nycatech.protos.v1.Component)
 private:
  class _Internal;
  void set_has_transform();
  void set_has_mesh();
  inline bool has_component() const;
  inline void clear_has_component();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Component& from_msg);
    union ComponentUnion {
      constexpr ComponentUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::nycatech::protos::v1::Transform* transform_;
      ::nycatech::protos::v1::Mesh* mesh_;
    } component_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Entity final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nycatech.protos.v1.Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  ~Entity() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Entity* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Entity));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Entity(
      ::google::protobuf::internal::ConstantInitialized);

  inline Entity(const Entity& from) : Entity(nullptr, from) {}
  inline Entity(Entity&& from) noexcept
      : Entity(nullptr, std::move(from)) {}
  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
        &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Entity& a, Entity& b) { a.Swap(&b); }
  inline void Swap(Entity* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entity* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Entity>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Entity& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Entity& from) { Entity::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Entity* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nycatech.protos.v1.Entity"; }

 protected:
  explicit Entity(::google::protobuf::Arena* arena);
  Entity(::google::protobuf::Arena* arena, const Entity& from);
  Entity(::google::protobuf::Arena* arena, Entity&& from) noexcept
      : Entity(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kComponentsFieldNumber = 1,
  };
  // repeated .nycatech.protos.v1.Component components = 1;
  int components_size() const;
  private:
  int _internal_components_size() const;

  public:
  void clear_components() ;
  ::nycatech::protos::v1::Component* mutable_components(int index);
  ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Component>* mutable_components();

  private:
  const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Component>& _internal_components() const;
  ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Component>* _internal_mutable_components();
  public:
  const ::nycatech::protos::v1::Component& components(int index) const;
  ::nycatech::protos::v1::Component* add_components();
  const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Component>& components() const;
  // @@protoc_insertion_point(class_scope:nycatech.protos.v1.Entity)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Entity& from_msg);
    ::google::protobuf::RepeatedPtrField< ::nycatech::protos::v1::Component > components_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Scene final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nycatech.protos.v1.Scene) */ {
 public:
  inline Scene() : Scene(nullptr) {}
  ~Scene() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Scene* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Scene));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Scene(
      ::google::protobuf::internal::ConstantInitialized);

  inline Scene(const Scene& from) : Scene(nullptr, from) {}
  inline Scene(Scene&& from) noexcept
      : Scene(nullptr, std::move(from)) {}
  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
        &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Scene& a, Scene& b) { a.Swap(&b); }
  inline void Swap(Scene* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Scene>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Scene& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Scene& from) { Scene::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Scene* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nycatech.protos.v1.Scene"; }

 protected:
  explicit Scene(::google::protobuf::Arena* arena);
  Scene(::google::protobuf::Arena* arena, const Scene& from);
  Scene(::google::protobuf::Arena* arena, Scene&& from) noexcept
      : Scene(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntitiesFieldNumber = 2,
    kSystemsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .nycatech.protos.v1.Entity entities = 2;
  int entities_size() const;
  private:
  int _internal_entities_size() const;

  public:
  void clear_entities() ;
  ::nycatech::protos::v1::Entity* mutable_entities(int index);
  ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Entity>* mutable_entities();

  private:
  const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Entity>& _internal_entities() const;
  ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Entity>* _internal_mutable_entities();
  public:
  const ::nycatech::protos::v1::Entity& entities(int index) const;
  ::nycatech::protos::v1::Entity* add_entities();
  const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Entity>& entities() const;
  // repeated .nycatech.protos.v1.System systems = 3;
  int systems_size() const;
  private:
  int _internal_systems_size() const;

  public:
  void clear_systems() ;
  ::nycatech::protos::v1::System* mutable_systems(int index);
  ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::System>* mutable_systems();

  private:
  const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::System>& _internal_systems() const;
  ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::System>* _internal_mutable_systems();
  public:
  const ::nycatech::protos::v1::System& systems(int index) const;
  ::nycatech::protos::v1::System* add_systems();
  const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::System>& systems() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:nycatech.protos.v1.Scene)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Scene& from_msg);
    ::google::protobuf::RepeatedPtrField< ::nycatech::protos::v1::Entity > entities_;
    ::google::protobuf::RepeatedPtrField< ::nycatech::protos::v1::System > systems_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Vector3.x)
  return _internal_x();
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:nycatech.protos.v1.Vector3.x)
}
inline float Vector3::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Vector3::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void Vector3::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Vector3.y)
  return _internal_y();
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:nycatech.protos.v1.Vector3.y)
}
inline float Vector3::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Vector3::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 3;
inline void Vector3::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Vector3.z)
  return _internal_z();
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:nycatech.protos.v1.Vector3.z)
}
inline float Vector3::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Vector3::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// Vector4

// float x = 1;
inline void Vector4::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Vector4::x() const {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Vector4.x)
  return _internal_x();
}
inline void Vector4::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:nycatech.protos.v1.Vector4.x)
}
inline float Vector4::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Vector4::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void Vector4::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Vector4::y() const {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Vector4.y)
  return _internal_y();
}
inline void Vector4::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:nycatech.protos.v1.Vector4.y)
}
inline float Vector4::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Vector4::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 3;
inline void Vector4::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float Vector4::z() const {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Vector4.z)
  return _internal_z();
}
inline void Vector4::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:nycatech.protos.v1.Vector4.z)
}
inline float Vector4::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Vector4::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// float w = 4;
inline void Vector4::clear_w() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.w_ = 0;
}
inline float Vector4::w() const {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Vector4.w)
  return _internal_w();
}
inline void Vector4::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:nycatech.protos.v1.Vector4.w)
}
inline float Vector4::_internal_w() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.w_;
}
inline void Vector4::_internal_set_w(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.w_ = value;
}

// -------------------------------------------------------------------

// Camera

// .nycatech.protos.v1.Vector4 view_matrix = 4;
inline bool Camera::has_view_matrix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.view_matrix_ != nullptr);
  return value;
}
inline void Camera::clear_view_matrix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.view_matrix_ != nullptr) _impl_.view_matrix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::nycatech::protos::v1::Vector4& Camera::_internal_view_matrix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::nycatech::protos::v1::Vector4* p = _impl_.view_matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::nycatech::protos::v1::Vector4&>(::nycatech::protos::v1::_Vector4_default_instance_);
}
inline const ::nycatech::protos::v1::Vector4& Camera::view_matrix() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Camera.view_matrix)
  return _internal_view_matrix();
}
inline void Camera::unsafe_arena_set_allocated_view_matrix(::nycatech::protos::v1::Vector4* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.view_matrix_);
  }
  _impl_.view_matrix_ = reinterpret_cast<::nycatech::protos::v1::Vector4*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nycatech.protos.v1.Camera.view_matrix)
}
inline ::nycatech::protos::v1::Vector4* Camera::release_view_matrix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nycatech::protos::v1::Vector4* released = _impl_.view_matrix_;
  _impl_.view_matrix_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::nycatech::protos::v1::Vector4* Camera::unsafe_arena_release_view_matrix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nycatech.protos.v1.Camera.view_matrix)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nycatech::protos::v1::Vector4* temp = _impl_.view_matrix_;
  _impl_.view_matrix_ = nullptr;
  return temp;
}
inline ::nycatech::protos::v1::Vector4* Camera::_internal_mutable_view_matrix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.view_matrix_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nycatech::protos::v1::Vector4>(GetArena());
    _impl_.view_matrix_ = reinterpret_cast<::nycatech::protos::v1::Vector4*>(p);
  }
  return _impl_.view_matrix_;
}
inline ::nycatech::protos::v1::Vector4* Camera::mutable_view_matrix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nycatech::protos::v1::Vector4* _msg = _internal_mutable_view_matrix();
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Camera.view_matrix)
  return _msg;
}
inline void Camera::set_allocated_view_matrix(::nycatech::protos::v1::Vector4* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.view_matrix_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.view_matrix_ = reinterpret_cast<::nycatech::protos::v1::Vector4*>(value);
  // @@protoc_insertion_point(field_set_allocated:nycatech.protos.v1.Camera.view_matrix)
}

// -------------------------------------------------------------------

// Transform

// .nycatech.protos.v1.Vector3 position = 1;
inline bool Transform::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void Transform::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::nycatech::protos::v1::Vector3& Transform::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::nycatech::protos::v1::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::nycatech::protos::v1::Vector3&>(::nycatech::protos::v1::_Vector3_default_instance_);
}
inline const ::nycatech::protos::v1::Vector3& Transform::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Transform.position)
  return _internal_position();
}
inline void Transform::unsafe_arena_set_allocated_position(::nycatech::protos::v1::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::nycatech::protos::v1::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nycatech.protos.v1.Transform.position)
}
inline ::nycatech::protos::v1::Vector3* Transform::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nycatech::protos::v1::Vector3* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::nycatech::protos::v1::Vector3* Transform::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nycatech.protos.v1.Transform.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nycatech::protos::v1::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::nycatech::protos::v1::Vector3* Transform::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nycatech::protos::v1::Vector3>(GetArena());
    _impl_.position_ = reinterpret_cast<::nycatech::protos::v1::Vector3*>(p);
  }
  return _impl_.position_;
}
inline ::nycatech::protos::v1::Vector3* Transform::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nycatech::protos::v1::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Transform.position)
  return _msg;
}
inline void Transform::set_allocated_position(::nycatech::protos::v1::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::nycatech::protos::v1::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:nycatech.protos.v1.Transform.position)
}

// .nycatech.protos.v1.Vector3 rotation = 2;
inline bool Transform::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline void Transform::clear_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::nycatech::protos::v1::Vector3& Transform::_internal_rotation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::nycatech::protos::v1::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::nycatech::protos::v1::Vector3&>(::nycatech::protos::v1::_Vector3_default_instance_);
}
inline const ::nycatech::protos::v1::Vector3& Transform::rotation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Transform.rotation)
  return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(::nycatech::protos::v1::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = reinterpret_cast<::nycatech::protos::v1::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nycatech.protos.v1.Transform.rotation)
}
inline ::nycatech::protos::v1::Vector3* Transform::release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nycatech::protos::v1::Vector3* released = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::nycatech::protos::v1::Vector3* Transform::unsafe_arena_release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nycatech.protos.v1.Transform.rotation)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nycatech::protos::v1::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::nycatech::protos::v1::Vector3* Transform::_internal_mutable_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nycatech::protos::v1::Vector3>(GetArena());
    _impl_.rotation_ = reinterpret_cast<::nycatech::protos::v1::Vector3*>(p);
  }
  return _impl_.rotation_;
}
inline ::nycatech::protos::v1::Vector3* Transform::mutable_rotation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::nycatech::protos::v1::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Transform.rotation)
  return _msg;
}
inline void Transform::set_allocated_rotation(::nycatech::protos::v1::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rotation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rotation_ = reinterpret_cast<::nycatech::protos::v1::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:nycatech.protos.v1.Transform.rotation)
}

// .nycatech.protos.v1.Vector3 scale = 3;
inline bool Transform::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_ != nullptr);
  return value;
}
inline void Transform::clear_scale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.scale_ != nullptr) _impl_.scale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::nycatech::protos::v1::Vector3& Transform::_internal_scale() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::nycatech::protos::v1::Vector3* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::nycatech::protos::v1::Vector3&>(::nycatech::protos::v1::_Vector3_default_instance_);
}
inline const ::nycatech::protos::v1::Vector3& Transform::scale() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Transform.scale)
  return _internal_scale();
}
inline void Transform::unsafe_arena_set_allocated_scale(::nycatech::protos::v1::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = reinterpret_cast<::nycatech::protos::v1::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nycatech.protos.v1.Transform.scale)
}
inline ::nycatech::protos::v1::Vector3* Transform::release_scale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::nycatech::protos::v1::Vector3* released = _impl_.scale_;
  _impl_.scale_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::nycatech::protos::v1::Vector3* Transform::unsafe_arena_release_scale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nycatech.protos.v1.Transform.scale)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::nycatech::protos::v1::Vector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::nycatech::protos::v1::Vector3* Transform::_internal_mutable_scale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.scale_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nycatech::protos::v1::Vector3>(GetArena());
    _impl_.scale_ = reinterpret_cast<::nycatech::protos::v1::Vector3*>(p);
  }
  return _impl_.scale_;
}
inline ::nycatech::protos::v1::Vector3* Transform::mutable_scale() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::nycatech::protos::v1::Vector3* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Transform.scale)
  return _msg;
}
inline void Transform::set_allocated_scale(::nycatech::protos::v1::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.scale_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.scale_ = reinterpret_cast<::nycatech::protos::v1::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:nycatech.protos.v1.Transform.scale)
}

// -------------------------------------------------------------------

// Mesh

// string name = 1;
inline void Mesh::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Mesh::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Mesh.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Mesh::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nycatech.protos.v1.Mesh.name)
}
inline std::string* Mesh::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Mesh.name)
  return _s;
}
inline const std::string& Mesh::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Mesh::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Mesh::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Mesh::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nycatech.protos.v1.Mesh.name)
  return _impl_.name_.Release();
}
inline void Mesh::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nycatech.protos.v1.Mesh.name)
}

// -------------------------------------------------------------------

// Component

// .nycatech.protos.v1.Transform transform = 1;
inline bool Component::has_transform() const {
  return component_case() == kTransform;
}
inline bool Component::_internal_has_transform() const {
  return component_case() == kTransform;
}
inline void Component::set_has_transform() {
  _impl_._oneof_case_[0] = kTransform;
}
inline void Component::clear_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (component_case() == kTransform) {
    if (GetArena() == nullptr) {
      delete _impl_.component_.transform_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.component_.transform_);
    }
    clear_has_component();
  }
}
inline ::nycatech::protos::v1::Transform* Component::release_transform() {
  // @@protoc_insertion_point(field_release:nycatech.protos.v1.Component.transform)
  if (component_case() == kTransform) {
    clear_has_component();
    auto* temp = _impl_.component_.transform_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.component_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nycatech::protos::v1::Transform& Component::_internal_transform() const {
  return component_case() == kTransform ? *_impl_.component_.transform_ : reinterpret_cast<::nycatech::protos::v1::Transform&>(::nycatech::protos::v1::_Transform_default_instance_);
}
inline const ::nycatech::protos::v1::Transform& Component::transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Component.transform)
  return _internal_transform();
}
inline ::nycatech::protos::v1::Transform* Component::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nycatech.protos.v1.Component.transform)
  if (component_case() == kTransform) {
    clear_has_component();
    auto* temp = _impl_.component_.transform_;
    _impl_.component_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Component::unsafe_arena_set_allocated_transform(::nycatech::protos::v1::Transform* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_component();
  if (value) {
    set_has_transform();
    _impl_.component_.transform_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nycatech.protos.v1.Component.transform)
}
inline ::nycatech::protos::v1::Transform* Component::_internal_mutable_transform() {
  if (component_case() != kTransform) {
    clear_component();
    set_has_transform();
    _impl_.component_.transform_ =
        ::google::protobuf::Message::DefaultConstruct<::nycatech::protos::v1::Transform>(GetArena());
  }
  return _impl_.component_.transform_;
}
inline ::nycatech::protos::v1::Transform* Component::mutable_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nycatech::protos::v1::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Component.transform)
  return _msg;
}

// .nycatech.protos.v1.Mesh mesh = 2;
inline bool Component::has_mesh() const {
  return component_case() == kMesh;
}
inline bool Component::_internal_has_mesh() const {
  return component_case() == kMesh;
}
inline void Component::set_has_mesh() {
  _impl_._oneof_case_[0] = kMesh;
}
inline void Component::clear_mesh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (component_case() == kMesh) {
    if (GetArena() == nullptr) {
      delete _impl_.component_.mesh_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.component_.mesh_);
    }
    clear_has_component();
  }
}
inline ::nycatech::protos::v1::Mesh* Component::release_mesh() {
  // @@protoc_insertion_point(field_release:nycatech.protos.v1.Component.mesh)
  if (component_case() == kMesh) {
    clear_has_component();
    auto* temp = _impl_.component_.mesh_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.component_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nycatech::protos::v1::Mesh& Component::_internal_mesh() const {
  return component_case() == kMesh ? *_impl_.component_.mesh_ : reinterpret_cast<::nycatech::protos::v1::Mesh&>(::nycatech::protos::v1::_Mesh_default_instance_);
}
inline const ::nycatech::protos::v1::Mesh& Component::mesh() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Component.mesh)
  return _internal_mesh();
}
inline ::nycatech::protos::v1::Mesh* Component::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nycatech.protos.v1.Component.mesh)
  if (component_case() == kMesh) {
    clear_has_component();
    auto* temp = _impl_.component_.mesh_;
    _impl_.component_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Component::unsafe_arena_set_allocated_mesh(::nycatech::protos::v1::Mesh* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_component();
  if (value) {
    set_has_mesh();
    _impl_.component_.mesh_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nycatech.protos.v1.Component.mesh)
}
inline ::nycatech::protos::v1::Mesh* Component::_internal_mutable_mesh() {
  if (component_case() != kMesh) {
    clear_component();
    set_has_mesh();
    _impl_.component_.mesh_ =
        ::google::protobuf::Message::DefaultConstruct<::nycatech::protos::v1::Mesh>(GetArena());
  }
  return _impl_.component_.mesh_;
}
inline ::nycatech::protos::v1::Mesh* Component::mutable_mesh() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nycatech::protos::v1::Mesh* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Component.mesh)
  return _msg;
}

inline bool Component::has_component() const {
  return component_case() != COMPONENT_NOT_SET;
}
inline void Component::clear_has_component() {
  _impl_._oneof_case_[0] = COMPONENT_NOT_SET;
}
inline Component::ComponentCase Component::component_case() const {
  return Component::ComponentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Entity

// repeated .nycatech.protos.v1.Component components = 1;
inline int Entity::_internal_components_size() const {
  return _internal_components().size();
}
inline int Entity::components_size() const {
  return _internal_components_size();
}
inline void Entity::clear_components() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.components_.Clear();
}
inline ::nycatech::protos::v1::Component* Entity::mutable_components(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Entity.components)
  return _internal_mutable_components()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Component>* Entity::mutable_components()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nycatech.protos.v1.Entity.components)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_components();
}
inline const ::nycatech::protos::v1::Component& Entity::components(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Entity.components)
  return _internal_components().Get(index);
}
inline ::nycatech::protos::v1::Component* Entity::add_components() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::nycatech::protos::v1::Component* _add = _internal_mutable_components()->Add();
  // @@protoc_insertion_point(field_add:nycatech.protos.v1.Entity.components)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Component>& Entity::components() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nycatech.protos.v1.Entity.components)
  return _internal_components();
}
inline const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Component>&
Entity::_internal_components() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.components_;
}
inline ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Component>*
Entity::_internal_mutable_components() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.components_;
}

// -------------------------------------------------------------------

// System

// .nycatech.protos.v1.System.Type type = 1;
inline void System::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::nycatech::protos::v1::System_Type System::type() const {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.System.type)
  return _internal_type();
}
inline void System::set_type(::nycatech::protos::v1::System_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nycatech.protos.v1.System.type)
}
inline ::nycatech::protos::v1::System_Type System::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::nycatech::protos::v1::System_Type>(_impl_.type_);
}
inline void System::_internal_set_type(::nycatech::protos::v1::System_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// Scene

// string name = 1;
inline void Scene::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Scene::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Scene.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scene::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nycatech.protos.v1.Scene.name)
}
inline std::string* Scene::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Scene.name)
  return _s;
}
inline const std::string& Scene::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Scene::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Scene::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Scene::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nycatech.protos.v1.Scene.name)
  return _impl_.name_.Release();
}
inline void Scene::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nycatech.protos.v1.Scene.name)
}

// repeated .nycatech.protos.v1.Entity entities = 2;
inline int Scene::_internal_entities_size() const {
  return _internal_entities().size();
}
inline int Scene::entities_size() const {
  return _internal_entities_size();
}
inline void Scene::clear_entities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entities_.Clear();
}
inline ::nycatech::protos::v1::Entity* Scene::mutable_entities(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Scene.entities)
  return _internal_mutable_entities()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Entity>* Scene::mutable_entities()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nycatech.protos.v1.Scene.entities)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entities();
}
inline const ::nycatech::protos::v1::Entity& Scene::entities(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Scene.entities)
  return _internal_entities().Get(index);
}
inline ::nycatech::protos::v1::Entity* Scene::add_entities() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::nycatech::protos::v1::Entity* _add = _internal_mutable_entities()->Add();
  // @@protoc_insertion_point(field_add:nycatech.protos.v1.Scene.entities)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Entity>& Scene::entities() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nycatech.protos.v1.Scene.entities)
  return _internal_entities();
}
inline const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Entity>&
Scene::_internal_entities() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entities_;
}
inline ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::Entity>*
Scene::_internal_mutable_entities() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entities_;
}

// repeated .nycatech.protos.v1.System systems = 3;
inline int Scene::_internal_systems_size() const {
  return _internal_systems().size();
}
inline int Scene::systems_size() const {
  return _internal_systems_size();
}
inline void Scene::clear_systems() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.systems_.Clear();
}
inline ::nycatech::protos::v1::System* Scene::mutable_systems(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nycatech.protos.v1.Scene.systems)
  return _internal_mutable_systems()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::System>* Scene::mutable_systems()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nycatech.protos.v1.Scene.systems)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_systems();
}
inline const ::nycatech::protos::v1::System& Scene::systems(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nycatech.protos.v1.Scene.systems)
  return _internal_systems().Get(index);
}
inline ::nycatech::protos::v1::System* Scene::add_systems() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::nycatech::protos::v1::System* _add = _internal_mutable_systems()->Add();
  // @@protoc_insertion_point(field_add:nycatech.protos.v1.Scene.systems)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::System>& Scene::systems() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nycatech.protos.v1.Scene.systems)
  return _internal_systems();
}
inline const ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::System>&
Scene::_internal_systems() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.systems_;
}
inline ::google::protobuf::RepeatedPtrField<::nycatech::protos::v1::System>*
Scene::_internal_mutable_systems() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.systems_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protos
}  // namespace nycatech


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::nycatech::protos::v1::System_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::nycatech::protos::v1::System_Type>() {
  return ::nycatech::protos::v1::System_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // scene_2eproto_2epb_2eh
